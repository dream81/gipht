MEXSHAPE

John Evans

   IMCS
     _________________________________________________________

   Table of Contents
   1. Introduction

        1.1. Quick Overview
        1.2. Requirements
        1.3. Contents of this Package

   2. Compiling Mexshape

        2.1. Why Compile?
        2.2. Case Study: Mandriva 2006
        2.3. Case Study: CentOS x86-64
        2.4. Case Study: Windows XP

   3. Wrapping It All Up...

        3.1. In the Interests of Full Disclosure...
        3.2. Thanks
     _________________________________________________________

Chapter 1. Introduction

1.1. Quick Overview

   This  code will provide you with a mexfile that will read (not
   write)  certain ESRI shapefiles without having to purchase the
   Mapping  Toolbox  from  MATLAB. By "certain shapefiles" I mean
   SHPT_POINT   (point),   SHPT_MULTIPOINT,   SHPT_ARC,   (simple
   polyline),  or SHPT_POLYGON (simple polygon). There are a slew
   of other possibilities, but I have yet to run into a shapefile
   that  did not get classified as one of these four (the code is
   written   to   throw  an  exception  if  an  unknown  type  is
   encountered).

   The mex file itself returns a structure for each shape that is
   read.  Because that can be a little annoying when dealing with
   point  shapefiles, a wrapper routine (shape_get.m) for the mex
   file  is  provided  that allows the user to optionally collect
   each of the points into a vector. It's probably a good idea to
   use the wrapper routine exclusively.
     _________________________________________________________

1.2. Requirements

   Mexshape requires Matlab version R13 or higher.

   Mexshape  requires shapelib, or at least parts of it. Shapelib
   is   distributed   under   the   LGPL  and  can  be  found  at
   http://dl.maptools.org/dl/shapelib/. It's uncertain to me from
   reading the LGPL if I can just package the few necessary files
   from  shapelib along with mexshape or if I have to package the
   entire  library.  Since I definitely don't want to package the
   entire  library,  for  now  at least I will not distribute any
   part  of shapelib. If someone knows the answer to this, please
   tell me!
     _________________________________________________________

1.3. Contents of this Package

   ChangeLog
          Developer  information, you probably don't need to read
          this.

   README
          Text  documentation  about mexshape. Equivalent to what
          you will find in doc/html

   data/US_Gulf_States, data/Test_Multipoint
          test shapefiles

   doc/html
          HTML  documentation  about mexshape. Equivalent to what
          you will find in the README file.

   doc/xml
          DocBook  XML  documentation  about  mexshape.  This  is
          actually   what   generates  the  README  and  doc/html
          documentation.    Not   really   suitable   for   human
          consumption.

   makefile
          Used to build the mex-file

   mex_shape.m
          help  information  for  the mex file itself (don't call
          this directly)

   shape_in.m
          Old    shapefile    reader   provided   for   backwards
          compatibility only. Superceded by shape_get.m

   shape_get.m
          Reads  shapefiles  by calling mexshape. Please use this
          m-file  to  read shapefiles instead of calling mexshape
          directly.

   shape_pt2arr.m
          converts  what's  read by from a point shapefile into x
          and y coordinates

   shape_plot.m
          plots the data you imported with shape_in
     _________________________________________________________

Chapter 2. Compiling Mexshape

2.1. Why Compile?

   I'm not distributing any binaries anymore, you have to compile
   this  yourself.  Depending upon what platform you are on, this
   means  you  may  also  have  to compile shapelib yourself. But
   before  you  shed  crocodile  tears and start tearing out your
   hair, this isn't all that hard. If you use Linux, there may be
   pre-compiled packages such as RPMs available; you will need to
   consult  your  local  package  management  system.  If you can
   forgive   a  shameless  plug,  Mandriva  Linux  makes  this  a
   breeze...  But  anyway,  if you can't find any RPMs, just grab
   the source code from http://dl.maptools.org/dl/shapelib/
     _________________________________________________________

2.2. Case Study: Mandriva 2006

   Start  by  copying  the  mexopts.sh  from  your  ${MATLAB}/bin
   directory into your working directory. The following RPMs were
   installed  via  URPMI  from  the contrib media source (consult
   Easy  URPMI  for information on how to set up your URPMI media
   sources).

   libshapelib1-1.2.10-1mdk
   libshapelib1-devel-1.2.10-1mdk
   shapelib-1.2.10-1mdk

   Then the bottom of mexopts.sh was modified to read
        CFLAGS="$CFLAGS -I/usr/local/include/libshp "
        CLIBS="$CLIBS -lshp"

   Save  these  edits and invoke make from the unix command line.
   Because  the  RPMs  install  in  the  normal  locations,  i.e.
   /usr/lib  and /usr/include, the edits to mexopts.sh are pretty
   minimal.
     _________________________________________________________

2.3. Case Study: CentOS x86-64

   This  linux  distribution  doesn't  readily  have  an  RPM for
   shapelib,  so in this case we compile it from source. First we
   retrieve and unpack shapelib from
   http://dl.maptools.org/dl/shapelib/.  In  order  to  build the
   library, we must issue the commands
     # make lib
     # make lib_install

   Now  copy  the  $MATLABROOT/bin/mexopts.sh  into your mexshape
   directory  and  alter the CFLAGS and CLIBS section down at the
   very bottom to read
     CFLAGS="-I/usr/local/include/libshp -g $CFLAGS"
     CLIBS="-lshp $CLIBS"

   From the unix command line, issue the command
     # make

   which unfortunately fails, eventually giving you the error
     /usr/bin/ld: /usr/local/lib/libshp.a(shpopen.o):
          relocation R_X86_64_32 against `a local symbol'
          cannot be used when making a shared object; recompile
          with -fPIC
     /usr/local/lib/libshp.a: could not read symbols: Bad value
     collect2: ld returned 1 exit status

          mex: link of 'mexshape.mexa64' failed.

     make: *** [all] Error 1

   This  is a pretty common error when compiling mex-files on the
   x86-64 platform, and it means we have to go back and recompile
   the  source  library  with the -fPIC option. This is kind of a
   pain because the shapelib makefile has everything hardcoded in
   for  the  library, so one has to do a fair bit of editing. But
   once  you  have that done and have recompiled the library, you
   can test it from matlab with
     >> d = shape_get ( 'data/US_Gulf_States.shp' )

     d =

             Shape: [119x1 struct]
         Attribute: [119x1 struct]
              Type: 'Polygon'
     _________________________________________________________

2.4. Case Study: Windows XP

   Start   by   retrieving   the  sourcecode  for  shapelib  from
   http://dl.maptools.org/dl/shapelib.  Copy  the following files
   into the mexshape directory

   shpopen.c
   dbfopen.c
   shapefil.h

   Then  from  within  matlab, cd into the mexshape directory and
   issue the following command
        >> mex -output mexshape -v mex_shape.c shpopen.c dbfopen.c

   If  MATLAB  presents  you  with a choice of compilers, you may
   safely  choose  Lcc.  It  may  give  you some warnings, but it
   should compile just fine.
     _________________________________________________________

Chapter 3. Wrapping It All Up...

3.1. In the Interests of Full Disclosure...

   I admit that I did evaluate the mapping toolbox from Mathworks
   under  a  trial  license.  However, other than putting all the
   outputs  into  structure  arrays (an idea I think I would have
   arrived  at  on my own anyway), nothing changed hands here. In
   fact I looked at no code at all (I only evaluated the OUTPUT).
   If  you  don't believe me, just look at the C code for the mex
   file.  I  defy  anyone at Mathworks to write code as sloppy as
   that.
     _________________________________________________________

3.2. Thanks

   Many  thanks  to  Sebastian Holz for helping to move this past
   the 1.0.4 release.
